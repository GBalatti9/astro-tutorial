---

//@ts-nocheck

interface Frontmatter {
  title: string;
  tags: string[];
}
interface Post {
  url: string;
  frontmatter: Frontmatter
}

import BlogPost from "@components/BlogPost.astro";
import type { GetStaticPaths, MarkdownInstance } from "astro";
import Layout from "src/layouts/Layout.astro";

type MarkdownPost = MarkdownInstance<Post>;
// Definición de getStaticPaths con tipado explícito
export const getStaticPaths: GetStaticPaths = async () => {
  // Use the correct type without assertion
  const allPosts = [...await Astro.glob<Post>("../posts/*.md")];
console.log({ allPosts });

  
  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
  
  return uniqueTags.map((tag) => ({
    params: { tag },
    props: {
      posts: allPosts.filter((post) => post.frontmatter.tags.includes(tag)),
    },
  }));
};

// Tipamos params y props para usar correctamente en la plantilla
const { tag } = Astro.params as { tag: string };
const { posts } = Astro.props as { posts: MarkdownPost[] };
---

<Layout title={tag}>
    <p>Entradas etiquetadas con <b>{tag}</b></p>
    <ul>
      {posts.map((post) => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))}
    </ul>
  </Layout>
